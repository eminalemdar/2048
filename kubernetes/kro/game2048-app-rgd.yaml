apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: game2048-application
  namespace: kro
spec:
  schema:
    apiVersion: v1alpha1
    kind: Game2048Application
    spec:
      # Application configuration
      name: string | default="game2048"
      namespace: string | default="game-2048"

      # Backend configuration
      backendImage: string | default="emnalmdr/2048-backend:latest"
      backendReplicas: integer | default=2
      backendPort: integer | default=8000

      # Frontend configuration
      frontendImage: string | default="emnalmdr/2048-frontend:v2"
      frontendReplicas: integer | default=2
      frontendPort: integer | default=80

      # DynamoDB configuration
      tableName: string | default="game2048-leaderboard"
      region: string | default="eu-west-1"

      # Ingress configuration
      hostname: string | default="2048.local"
      ingressClass: string | default="alb"

  resources:
    # Namespace
    - id: appNamespace
      template:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${schema.spec.namespace}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}
            app.kubernetes.io/managed-by: kro

    # Backend Service Account
    - id: backendServiceAccount
      template:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: ${schema.spec.name}-backend
          namespace: ${schema.spec.namespace}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}-backend
            app.kubernetes.io/component: backend
            app.kubernetes.io/managed-by: kro
          annotations:
            eks.amazonaws.com/role-arn: arn:aws:iam::247747705325:role/game2048-backend-role

    # Backend Deployment
    - id: backendDeployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name}-backend
          namespace: ${schema.spec.namespace}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}-backend
            app.kubernetes.io/component: backend
            app.kubernetes.io/managed-by: kro
        spec:
          replicas: ${schema.spec.backendReplicas}
          selector:
            matchLabels:
              app.kubernetes.io/name: ${schema.spec.name}-backend
              app.kubernetes.io/component: backend
          template:
            metadata:
              labels:
                app.kubernetes.io/name: ${schema.spec.name}-backend
                app.kubernetes.io/component: backend
            spec:
              serviceAccountName: ${schema.spec.name}-backend
              containers:
                - name: backend
                  image: ${schema.spec.backendImage}
                  imagePullPolicy: IfNotPresent
                  ports:
                    - containerPort: ${schema.spec.backendPort}
                      name: http
                  env:
                    - name: PORT
                      value: "8000"
                    - name: AWS_REGION
                      value: ${schema.spec.region}
                    - name: DYNAMODB_TABLE
                      value: ${schema.spec.tableName}
                    - name: GAME_SESSIONS_TABLE
                      value: "game2048-sessions-dev"
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: ${schema.spec.backendPort}
                    initialDelaySeconds: 10
                    periodSeconds: 30
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: ${schema.spec.backendPort}
                    initialDelaySeconds: 5
                    periodSeconds: 10

    # Backend Service
    - id: backendService
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-backend-service
          namespace: ${schema.spec.namespace}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}-backend-service
            app.kubernetes.io/component: backend
            app.kubernetes.io/managed-by: kro
          annotations:
            alb.ingress.kubernetes.io/healthcheck-path: /health
        spec:
          type: ClusterIP
          ports:
            - port: ${schema.spec.backendPort}
              targetPort: ${schema.spec.backendPort}
              protocol: TCP
              name: http
          selector:
            app.kubernetes.io/name: ${schema.spec.name}-backend
            app.kubernetes.io/component: backend

    # Frontend Deployment
    - id: frontendDeployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name}-frontend
          namespace: ${schema.spec.namespace}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}-frontend
            app.kubernetes.io/component: frontend
            app.kubernetes.io/managed-by: kro
        spec:
          replicas: ${schema.spec.frontendReplicas}
          selector:
            matchLabels:
              app.kubernetes.io/name: ${schema.spec.name}-frontend
              app.kubernetes.io/component: frontend
          template:
            metadata:
              labels:
                app.kubernetes.io/name: ${schema.spec.name}-frontend
                app.kubernetes.io/component: frontend
            spec:
              containers:
                - name: frontend
                  image: ${schema.spec.frontendImage}
                  imagePullPolicy: IfNotPresent
                  ports:
                    - containerPort: ${schema.spec.frontendPort}
                      name: http
                  resources:
                    requests:
                      memory: "32Mi"
                      cpu: "25m"
                    limits:
                      memory: "64Mi"
                      cpu: "50m"
                  livenessProbe:
                    httpGet:
                      path: /
                      port: ${schema.spec.frontendPort}
                    initialDelaySeconds: 10
                    periodSeconds: 30
                  readinessProbe:
                    httpGet:
                      path: /
                      port: ${schema.spec.frontendPort}
                    initialDelaySeconds: 5
                    periodSeconds: 10

    # Frontend Service
    - id: frontendService
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-frontend-service
          namespace: ${schema.spec.namespace}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}-frontend-service
            app.kubernetes.io/component: frontend
            app.kubernetes.io/managed-by: kro
        spec:
          type: ClusterIP
          ports:
            - port: ${schema.spec.frontendPort}
              targetPort: ${schema.spec.frontendPort}
              protocol: TCP
              name: http
          selector:
            app.kubernetes.io/name: ${schema.spec.name}-frontend
            app.kubernetes.io/component: frontend

    # Ingress
    - id: ingress
      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.spec.name}-ingress
          namespace: ${schema.spec.namespace}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}-ingress
            app.kubernetes.io/managed-by: kro
          annotations:
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/target-type: ip
            alb.ingress.kubernetes.io/healthcheck-path: /health
            alb.ingress.kubernetes.io/backend-protocol: HTTP
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
            alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=3600
        spec:
          ingressClassName: ${schema.spec.ingressClass}
          rules:
            - http:
                paths:
                  - path: /game/
                    pathType: Prefix
                    backend:
                      service:
                        name: ${schema.spec.name}-backend-service
                        port:
                          number: ${schema.spec.backendPort}
                  - path: /leaderboard/
                    pathType: Prefix
                    backend:
                      service:
                        name: ${schema.spec.name}-backend-service
                        port:
                          number: ${schema.spec.backendPort}
                  - path: /health
                    pathType: Exact
                    backend:
                      service:
                        name: ${schema.spec.name}-backend-service
                        port:
                          number: ${schema.spec.backendPort}
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: ${schema.spec.name}-frontend-service
                        port:
                          number: ${schema.spec.frontendPort}
